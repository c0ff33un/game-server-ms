---
swagger: "2.0"
info:
  description: "This is a game-server it allowss to simulate the game world and communicate world state with clients via websockets."
  version: "0.1.0"
  title: "taurus-GAME-SERVER-MS"
  contact:
    email: "miaortizma@unal.edu.co"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
host: "petstore.swagger.io"
basePath: "/"
tags:
- name: "room"
  description: "Create and Manage Game rooms"
schemes:
- "https"
- "http"
- "ws"
paths:
  /room:
    post:
      tags:
      - "room"
      summary: "Create a new (temporary) room"
      responses:
        201:
          description: "Room Created"
        500:
          description: "Internal Server Error"
          
      security:
      - api_key: []
  /room/{roomId}:
    get:
      tags:
      - "room"
      summary: "Find room by ID"
      description: "Returns a single room"
      operationId: "getRoomById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "roomId"
        in: "path"
        description: "ID of room to return"
        required: true
        type: "string"
        format: "ksuid"
        x-exportParamName: "roomId"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Room"
        404:
          description: "Room not found"
      security:
      - api_key: []
  /ws/{roomId}:
    put:
      tags:
      - "room"
      summary: "Join Room"
      parameters:
      - name: "roomId"
        in: "path"
        description: "ID of room to join"
        required: true
        type: "string"
        format: "ksuid"
        x-exportParamName: "roomId"
      responses:
        200:
          description: "sucessful operation"
      security:
      - game_auth:
        - "join:rooms"
        
  /room/ready/{roomId}:
    get:
      tags:
      - "room"
      summary: "Query whether room is ready"
      parameters:
      - name: "roomId"
        in: "path"
        description: "ID of room to check"
        required: true
        type: "string"
        format: "ksuid"
        x-exportParamName: "roomId"
      responses:
        200:
          description: "Room ready"
        202:
          description: "Room not ready"
      security:
      - api_key: []
  /room/setup/{roomId}:
    get:
      tags:
      - "room"
      summary: "Query wether room is setup"
      parameters:
      - name: "roomId"
        in: "path"
        description: "ID of room to setup"
        required: true
        type: "string"
        format: "ksuid"
        x-exportParamName: "roomId"
      responses:
        200:
          description: "Room ready and setup"
        409:
          description: "Room not ready"
      security:
      - api_key: []
    put:
      tags:
      - "room"
      summary: "Setup room"
      parameters:
      - name: "roomId"
        in: "path"
        description: "ID of room to setup"
        required: true
        type: "string"
        format: "ksuid"
        x-exportParamName: "roomId"
      responses:
        200:
          description: "Room ready and setup"
        409:
          description: "Room not ready"
      security:
      - api_key: []
  /room/setupready/{roomId}:
    get:
      tags:
      - "room"
      summary: "Query whether room is ready and setup"
      parameters:
      - name: "roomId"
        in: "path"
        description: "ID of room to check"
        required: true
        type: "string"
        format: "ksuid"
        x-exportParamName: "roomId"
      responses:
        200:
          description: "Room ready and setup"
        202:
          description: "Room not ready or not setup"
        409:
          description: "Room setup not requested"
      security:
      - api_key: []
  /room/start/{roomId}:
    put:
      tags:
      - "room"
      summary: "Start a ready and setup room"
      parameters:
      - name: "roomId"
        in: "path"
        description: "ID of room to start"
        required: true
        type: "string"
        format: "ksuid"
        x-xportParamName: "roomId"
      responses:
        200:
          description: "Game started"
        409:
          description: "Room not ready or not setup"
      security:
        - api_key: []
  /room/roundinfo/{roomId}:
    get:
      tags:
      - "room"
      summary: "Returns room last round information"
      parameters:
      - name: "roomId"
        in: "path"
        description: "ID of room to collect"
        required: true
        type: "string"
        format: "string"
        x-exportParamName: "roomId"
      responses:
        200:
          description: "Last round information correctly retrieved"
          schema:
            $ref: "#/definitions/Round"
        404:
          description: "Room not found"
      security:
        - api_key: []

  /room/shutdown/{roomId}:
    delete:
      summary: "Gracefully shutdown room"
      tags:
      - "room"
      parameters:
      - name: "roomId"
        in: "path"
        description: "ID of room to collect"
        required: true
        type: "string"
        format: "ksuid"
        x-exportParamName: "roomId"
      responses:
        204:
          description: "Room successfully deleted"
        404:
          description: "Room not found"
      security:
        - api_key: []

securityDefinitions:
  game_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      join:rooms: "join game rooms"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Room:
    type: "object"
    properties:
      id:
        type: "string"
        format: "ksuid"
      ready:
        type: "boolean"
        default: false
      setup:
        type: "boolean"
        default: false
      players:
        type: "array"
        items:
          $ref: "#/definitions/Player"
        
  Round:
    type: "object"
    properties:
      start-time:
        type: "string"
        format: "date-time"
      duration:
        type: "integer"
        format: "int32"
      grid:
        $ref: "#/definitions/Grid"
      players:
        type: "array"
        items:
          $ref: "#/definitions/Player"
      
  Player:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      role:
        type: "string"
      points:
        type: "integer"
        format: "int32"
  
  Grid:
    type: "object"
    properties:
      n:
        type: "integer"
        format: "int64"
      m:
        type: "integer"
        format: "int64"
      seed:
        type: "integer"
        format: "int64"
        e
